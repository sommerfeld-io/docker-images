---
# @file build.yml
# @brief Github Actions workflow for the website module that builds the Docker images and runs automated tests.
#
# @description This GitHub Actions workflow is designed for continuous integration and automates
# essential tasks such as building the application, and running automated tests. It ensures code
# quality, catches errors early, and provides developers with quick feedback on their changes.
# The workflow triggers automatically when new code is pushed to the remote repo and automatically
# each night, making it an integral part of the development process to maintain a stable and
# reliable codebase.


name: Build (is releasable)

on:
  push:
    branches:
      - main
    # branches-ignore:
    #   - dependabot/**
  pull_request:
    branches-ignore:
      - dependabot/**
  schedule:
    - cron: '0 3 * * 1' # https://crontab.guru/#0_2_*_*_1

permissions:
  contents: read

jobs:
  sonar-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        if: ${{ github.actor != 'dependabot[bot]' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  lint-yaml:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run yamllint
        run: make lint-yaml
        shell: bash

  lint-folders:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run folderslint in container
        run: make lint-folders
        shell: bash

  lint-filenames:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run ls-lint in container
        run: make lint-filenames
        shell: bash

  shellcheck:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run ShellCheck
        uses: ludeeus/action-shellcheck@2.0.0
        with:
          ignore_paths: node_modules target

  lint-makefile:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run checkmake in container
        run: make lint-makefile
        shell: bash

  ci-docker-images:
    runs-on: ubuntu-latest
    needs: ['lint-yaml', 'lint-folders', 'lint-filenames', 'shellcheck', 'lint-makefile']
    permissions:
      contents: read
    strategy:
      matrix:
        image: ['devcontainer-go', 'devcontainer-ubuntu', 'folderslint', 'ftp-client', 'jq', 'qodana', 'source2docs']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: src/main/${{ matrix.image }}/Dockerfile
      - name: Set docker tag ('edge' for main or feature branch)
        id: vars
        run: |
          echo "Ref = ${{ github.ref }}"
          echo "Ref Name = $GITHUB_REF_NAME"
          echo "Head Ref = $GITHUB_HEAD_REF"

          # TAG="$GITHUB_REF_NAME"
          # if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          #   TAG="$GITHUB_HEAD_REF"
          # fi

          TAG='rc'

          echo "tag = $TAG"
          echo "DOCKER_TAG=$TAG" >> $GITHUB_OUTPUT
        shell: bash
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        uses: docker/login-action@v3
        if: ${{ github.actor != 'dependabot[bot]' }}
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Docker image build
        uses: docker/build-push-action@v5
        with:
          context: src/main/${{ matrix.image }}
          platforms: linux/amd64
          push: ${{ (github.actor != 'dependabot[bot]') && (github.ref == 'refs/heads/main') }}
          tags: ${{ secrets.DOCKERHUB_USER }}/${{ matrix.image }}:${{ steps.vars.outputs.DOCKER_TAG }}

  on-failure:
    runs-on: ubuntu-latest
    needs: ['sonar-scan', 'lint-yaml', 'lint-folders', 'lint-filenames', 'shellcheck', 'lint-makefile', 'ci-docker-images']
    if: failure()
    steps:
      - name: Send Pipeline Status to Google Chat
        if: always()
        uses: Co-qn/google-chat-notification@releases/v1
        with:
          name: ${{ github.workflow }}
          url: ${{ secrets.GOOGLE_CHAT_WEBHOOK }}
          status: failure
